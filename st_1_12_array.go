package main
//go run st_1_12_array.go
import "fmt"

func main() {
	var a [3]int
	var b [3]int = [3]int{1, 2, 3}
	c := [3]int{1, 2, 3}
	d := [...]int{1, 2, 3}
	e := [3]int{1: 12}

	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
	fmt.Println(d)
	fmt.Println(e)

	// сравнение массивов
	f := [3]int{1, 2, 3}
	g := [3]int{1, 2, 3}
	i := [3]int{3, 2, 1}

	fmt.Println(f == g) // true
	fmt.Println(f == i) // false

	// обращение по индексу
	fmt.Println(b[0])     // 1
	fmt.Println(b[2])     // 3

	b[0] = 87

	fmt.Println(b)     // 87

	j := [5]int{1, 2, 3, 4, 5}
	fmt.Println(j) // [1 2 3 4 5]

	for k := 0; k < len(j); k++ {
		fmt.Println(j[k])
		// 1
		// 2
		// 3
		// 4
		// 5
	}

	for idx, elem := range j {
		fmt.Printf("Элемент с индексом %d: %d\n", idx, elem)
		// Элемент с индексом 0: 1
		// Элемент с индексом 1: 2
		// Элемент с индексом 2: 3
		// Элемент с индексом 3: 4
		// Элемент с индексом 4: 5
	}

	// На первом этапе на стандартный ввод подается 10 целых положительных чисел, которые должны быть записаны в порядке ввода в массив из 10 элементов.
	// Тип чисел, входящих в массив, должен соответствовать минимально возможному целому беззнаковому числу.
	// Имя массива который вы должны сами создать workArray (условие обязательное). Для чтения из стандартного ввода уже импортирован пакет fmt.
	// На втором этапе на стандартный ввод подаются еще 3 пары чисел - индексы элементов этого массива, которые требуется поменять местами
	// (если такая пара чисел 3 и 7, значит в массиве элемент с 3 индексом нужно поменять местами с элементом, индекс которого 7).
	// Элементы полученного массива должны быть выведены через пробел на стандартный вывод.
	// Далее автоматически будет проведена проверка используемых типов, результат которой будет добавлен к вашему ответу.
	var l [16]uint8
	var workArray [10]uint8
	var m [6]uint8

	var n uint8
	for idx, _ := range l {
		fmt.Scan(&n)
		if idx > 9 {
			m[idx - 10] = n
		} else {
			workArray[idx] = n
		}
	}

	for i := 0; i < len(m); i+=2 {
		workArray[m[i]], workArray[m[i+1]] = workArray[m[i+1]], workArray[m[i]]
	}

	for _, el := range workArray {
		fmt.Printf("%d ", el)
	}
}
